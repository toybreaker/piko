{"version":3,"sourceRoot":"","sources":["../scss/utils/_copyright.scss","../scss/colors/utilities/_css-vars.scss"],"names":[],"mappings":";AAAA;AAAA;AAAA;AAAA;ACWI;EA0BI;EACA;EAKA;EAGA","file":"ciko.colors.css","sourcesContent":["/*!\n * CIKO CSS üçï v0.0.2 (https://ciko.rokma.rocks)\n * Copyright 2023 - Licensed under MIT\n */\n","@use \"sass:map\";\n@use \"../../colors\";\n@use \"settings\";\n@use \"utils\";\n\n@mixin css-vars {\n  $enable-css-vars: map.get(settings.$utilities, \"css-vars\");\n  $color-property-name: map.get(settings.$properties, \"color\");\n  $css-var-color-prefix: #{settings.$css-var-prefix}#{$color-property-name};\n\n  @if $enable-css-vars {\n    :root {\n      // Loop through color families\n      @each $family, $colors in colors.$colors {\n        @if index(map.get(settings.$palette, \"color-families\"), $family) {\n          $css-var-family-name: #{$css-var-color-prefix}-#{$family};\n\n          // Loop through colors\n          @each $shade, $color-value in $colors {\n            // Main color\n            @if $shade == \"main\" and map.get(settings.$palette, \"enable-main-color\") {\n              --#{$css-var-family-name}: #{utils.display-color($color-value)};\n            }\n\n            // Shades\n            @else if\n              index(map.get(settings.$palette, \"shades\"), $shade) and\n              map.get(settings.$palette, \"enable-shades\")\n            {\n              --#{$css-var-family-name}-#{$shade}: #{utils.display-color($color-value)};\n            }\n          }\n        }\n      }\n\n      // Black & white\n      @if map.get(settings.$palette, \"enable-black-and-white\") {\n        --#{$css-var-color-prefix}-black: #{utils.display-color(colors.$black)};\n        --#{$css-var-color-prefix}-white: #{utils.display-color(colors.$white)};\n      }\n\n      // Text color variables\n      @if map.get(settings.$utilities, \"color-for-background-colors\") {\n        --#{$css-var-color-prefix}-light: #{utils.display-color(\n            map.get(settings.$palette, \"light-color\")\n          )};\n        --#{$css-var-color-prefix}-dark: #{utils.display-color(\n            map.get(settings.$palette, \"dark-color\")\n          )};\n      }\n    }\n  }\n}\n"]}