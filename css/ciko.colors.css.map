{"version":3,"sources":["ciko.colors.css","../scss/utils/_copyright.scss","../scss/colors/utilities/_css-vars.scss","../scss/colors/utilities/_colors.scss","../scss/colors/utilities/_background-colors.scss"],"names":[],"mappings":"AAAA,gBAAgB;ACAhB;;;EAAA;ACWI;EAUU,wCAAA;EAgBN,oCAAA;EACA,sCAAA;EAKA,sCAAA;EAGA,mCAAA;AFnCR;;AGeY;EACE,4BALc;AHP5B;;AI+BY;EACE,uCALQ;EAtBd,4BAAA;AJAR","file":"ciko.colors.css","sourcesContent":["@charset \"UTF-8\";\n/*!\n * CIKO CSS üçï v0.0.1 (https://ciko.rokma.rocks)\n * Copyright 2023 - Licensed under MIT\n */\n:root {\n  --CIKOcolor-lime: hsl(120deg, 100%, 50%);\n  --CIKOcolor-black: hsl(0deg, 0%, 0%);\n  --CIKOcolor-white: hsl(0deg, 0%, 100%);\n  --CIKOcolor-light: hsl(0deg, 0%, 100%);\n  --CIKOcolor-dark: hsl(0deg, 0%, 0%);\n}\n\n.CIKOcolor-lime {\n  color: var(--CIKOcolor-lime);\n}\n\n.CIKObackground-lime {\n  background-color: var(--CIKOcolor-lime);\n  color: var(--CIKOcolor-dark);\n}\n\n/*# sourceMappingURL=ciko.colors.css.map */\n","/*!\n * CIKO CSS üçï v0.0.1 (https://ciko.rokma.rocks)\n * Copyright 2023 - Licensed under MIT\n */\n","@use \"sass:map\";\n@use \"../../colors\";\n@use \"settings\";\n@use \"utils\";\n\n@mixin css-vars {\n  $enable-css-vars: map.get(settings.$utilities, \"css-vars\");\n  $color-property-name: map.get(settings.$properties, \"color\");\n  $css-var-color-prefix: #{settings.$css-var-prefix}#{$color-property-name};\n\n  @if $enable-css-vars {\n    :root {\n      // Loop through color families\n      @each $family, $colors in colors.$colors {\n        @if index(map.get(settings.$palette, \"color-families\"), $family) {\n          $css-var-family-name: #{$css-var-color-prefix}-#{$family};\n\n          // Loop through colors\n          @each $shade, $color-value in $colors {\n            // Main color\n            @if $shade == \"main\" and map.get(settings.$palette, \"enable-main-color\") {\n              --#{$css-var-family-name}: #{utils.display-color($color-value)};\n            }\n\n            // Shades\n            @else if\n              index(map.get(settings.$palette, \"shades\"), $shade) and\n              map.get(settings.$palette, \"enable-shades\")\n            {\n              --#{$css-var-family-name}-#{$shade}: #{utils.display-color($color-value)};\n            }\n          }\n        }\n      }\n\n      // Black & white\n      @if map.get(settings.$palette, \"enable-black-and-white\") {\n        --#{$css-var-color-prefix}-black: #{utils.display-color(colors.$black)};\n        --#{$css-var-color-prefix}-white: #{utils.display-color(colors.$white)};\n      }\n\n      // Text color variables\n      @if map.get(settings.$utilities, \"color-for-background-colors\") {\n        --#{$css-var-color-prefix}-light: #{utils.display-color(\n            map.get(settings.$palette, \"light-color\")\n          )};\n        --#{$css-var-color-prefix}-dark: #{utils.display-color(\n            map.get(settings.$palette, \"dark-color\")\n          )};\n      }\n    }\n  }\n}\n","@use \"sass:map\";\n@use \"../../colors\";\n@use \"settings\";\n@use \"utils\";\n\n@mixin colors {\n  @if map.get(settings.$utilities, \"colors\") {\n    $enable-css-vars: map.get(settings.$utilities, \"css-vars\");\n    $color-property-name: map.get(settings.$properties, \"color\");\n    $css-var-color-prefix: #{settings.$css-var-prefix}#{$color-property-name};\n\n    // Loop through color families\n    @each $family, $colors in colors.$colors {\n      @if index(map.get(settings.$palette, \"color-families\"), $family) {\n        $css-var-family-name: #{$css-var-color-prefix}-#{$family};\n        $class-family-name: #{$color-property-name}-#{$family};\n\n        // Loop through colors\n        @each $shade, $color-value in $colors {\n          // Main color\n          @if $shade == \"main\" and map.get(settings.$palette, \"enable-main-color\") {\n            @if $enable-css-vars {\n              $color-value: var(--#{$css-var-family-name});\n            } @else {\n              $color-value: utils.display-color($color-value);\n            }\n            .#{settings.$css-class-prefix}#{$class-family-name} {\n              color: $color-value;\n            }\n          }\n\n          // Shades\n          @else if\n            index(map.get(settings.$palette, \"shades\"), $shade) and\n            map.get(settings.$palette, \"enable-shades\")\n          {\n            @if $enable-css-vars {\n              $color-value: var(--#{$css-var-family-name}-#{$shade});\n            } @else {\n              $color-value: utils.display-color($color-value);\n            }\n            .#{settings.$css-class-prefix}#{$class-family-name}-#{$shade} {\n              color: $color-value;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","@use \"sass:map\";\n@use \"../../colors\";\n@use \"settings\";\n@use \"utils\";\n\n$enable-css-vars: map.get(settings.$utilities, \"css-vars\");\n$background-color-property-name: map.get(settings.$properties, \"background-color\");\n$color-property-name: map.get(settings.$properties, \"color\");\n$css-var-color-prefix: #{settings.$css-var-prefix}#{$color-property-name};\n\n@mixin foreground-color($background-color) {\n  @if map.get(settings.$utilities, \"color-for-background-colors\") {\n    @if utils.foreground-brightness($background-color) == \"light\" {\n      @if $enable-css-vars {\n        color: var(--#{$css-var-color-prefix}-light);\n      } @else {\n        color: utils.display-color(map.get(settings.$palette, \"light-color\"));\n      }\n    } @else {\n      @if $enable-css-vars {\n        color: var(--#{$css-var-color-prefix}-dark);\n      } @else {\n        color: utils.display-color(map.get(settings.$palette, \"dark-color\"));\n      }\n    }\n  }\n}\n\n@mixin background-colors {\n  @if map.get(settings.$utilities, \"background-colors\") {\n    // Loop through color families\n    @each $family, $colors in colors.$colors {\n      @if index(map.get(settings.$palette, \"color-families\"), $family) {\n        $css-var-family-name: #{$css-var-color-prefix}-#{$family};\n        $class-family-name: #{$background-color-property-name}-#{$family};\n\n        // Loop through colors\n        @each $shade, $color-value in $colors {\n          // Main color\n          @if $shade == \"main\" and map.get(settings.$palette, \"enable-main-color\") {\n            $value: $color-value;\n            @if $enable-css-vars {\n              $value: var(--#{$css-var-family-name});\n            } @else {\n              $value: utils.display-color($color-value);\n            }\n            .#{settings.$css-class-prefix}#{$class-family-name} {\n              background-color: $value;\n              @include foreground-color($color-value);\n            }\n          }\n\n          // Shades\n          @else if\n            index(map.get(settings.$palette, \"shades\"), $shade) and\n            map.get(settings.$palette, \"enable-shades\")\n          {\n            $value: $color-value;\n            @if $enable-css-vars {\n              $value: var(--#{$css-var-family-name}-#{$shade});\n            } @else {\n              $value: utils.display-color($color-value);\n            }\n            .#{settings.$css-class-prefix}#{$class-family-name}-#{$shade} {\n              background-color: $value;\n              @include foreground-color($color-value);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"]}